[{"name":"Jim","comment":"\n\n@docs task, taskWithError\n@docs function\n\n","unions":[],"aliases":[],"values":[{"name":"function","comment":" It is recommended to stay away from this function unless it's absolutely necessary. Implementing a function in Jim gives many more guarantees than is possible in JavaScript. If you're looking to implement a function that isn't pure, consider reaching for a [task](#task) or a [port](https://guide.elm-lang.org/interop/ports.html).\n\n    import Json.Decode as D\n    import Json.Encode as E\n\n    addToResult : Float -> Float -> Result D.Error Float\n    addToResult a b =\n        function\n            -- the name used to register the JavsScript function\n            \"add\"\n            -- the arguments passed into the JavaScript function\n            [ E.float a, E.float b ]\n            -- a decoder for the return value of the JavaScript function\n            D.float\n\n    add : Float -> Float -> Float\n    add a b =\n        addToResult a b\n            |> Result.withDefault 0\n\n","type":"String.String -> List.List Json.Encode.Value -> Json.Decode.Decoder a -> Result.Result Json.Decode.Error a"},{"name":"task","comment":" Create a task using a JavaScript function.\n\n    import Json.Decode as D\n    import Json.Encode as E\n\n\n    -- make 2 http requests that respond with numbers, then add them together\n    addResponse : String -> String -> Task D.Error Float\n    addResponse url1 url2 =\n        task\n            -- the name used to register the JavaScript function that represents this task\n            \"add\"\n            -- the arguments passed into the JavaScript function\n            [ E.string url1, E.string url2 ]\n            -- a decoder for the return value of the JavaScript function\n            D.float\n\n","type":"String.String -> List.List Json.Encode.Value -> Json.Decode.Decoder a -> Task.Task Json.Decode.Error a"},{"name":"taskWithError","comment":" Create a `Task` with a custom error type.\n\n    import Json.Decode as D\n    import Json.Encode as E\n\n    type Error\n        = ResponseError String\n        | DecodeError D.Error\n\n    -- make 2 http requests that respond with numbers, then add them together\n    addResponse : String -> String -> Task Error Float\n    addResponse url1 url2 =\n        taskWithError\n            \"add\"\n            [ E.String url1, E.string url2 ]\n            (D.oneOf\n                [ D.map Ok D.float\n                , D.map (Err << ResponseError) D.string\n                ]\n            )\n            DecodeError\n\n","type":"String.String -> List.List Json.Encode.Value -> Json.Decode.Decoder (Result.Result x a) -> (Json.Decode.Error -> x) -> Task.Task x a"}],"binops":[]}]